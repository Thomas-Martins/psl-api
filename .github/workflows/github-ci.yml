name: PSL API CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  rebase-check:
    name: Rebase Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set target branch variable
        run: echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
      - name: Check if branch is rebased on target branch
        run: |
          git fetch origin $TARGET_BRANCH
          if [ "$(git merge-base HEAD origin/$TARGET_BRANCH)" != "$(git rev-parse origin/$TARGET_BRANCH)" ]; then
            echo "The branch is not rebased on $TARGET_BRANCH."
            exit 1
          fi

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [rebase-check]
    if: always() && (github.event_name == 'pull_request' || github.event_name == 'push')
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"
      - uses: actions/checkout@v4
      - name: Setup environment for testing
        run: cp .env.testing-ci .env
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Generate Passport keys
        run: php artisan passport:keys --force
      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.event_name == 'push' && needs.tests.result == 'success'
    steps:
      - name: Deploy to Server via SSH
        # Pin to the latest stable tag (adjust when a newer one is released)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Se d√©place dans le dossier du projet sur le serveur
            cd /root/psl-solutions-api # <-- ADAPTE LE CHEMIN VERS TON PROJET

            # R√©cup√®re la derni√®re version du code de la branche pouss√©e
            git pull origin ${{ github.ref_name }}

            # Relance docker-compose en for√ßant la reconstruction de l'image
            docker-compose -f docker-compose.prod.yml up -d --build

  notify-pr:
    name: Notify PR Status on Discord
    runs-on: ubuntu-latest
    needs: [tests]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Notify Discord of PR status
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          STATUS: ${{ needs.tests.result }}
        run: |
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="‚úÖ **La PR de ${{ github.head_ref }} vers ${{ github.base_ref }} a pass√© les tests et est pr√™te √† √™tre merg√©e !** üéâ"
          else
            MESSAGE="‚ùå **La PR de ${{ github.head_ref }} vers ${{ github.base_ref }} a √©chou√© aux tests.** üö®"
          fi
          curl -H "Authorization: Bot $DISCORD_BOT_TOKEN" -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" https://discord.com/api/v9/channels/$DISCORD_CHANNEL_ID/messages

  notify-deploy:
    name: Notify Deploy Status on Discord
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.event_name == 'push'
    steps:
      - name: Notify Discord of deploy status
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          STATUS: ${{ needs.deploy.result }}
        run: |
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="üöÄ **D√©ploiement du backend sur ${{ github.ref_name }} r√©ussi !** üéâ"
          else
            MESSAGE="‚ùå **Le d√©ploiement du backend sur ${{ github.ref_name }} a √©chou√©.** üö®"
          fi
          curl -H "Authorization: Bot $DISCORD_BOT_TOKEN" -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" https://discord.com/api/v9/channels/$DISCORD_CHANNEL_ID/messages
