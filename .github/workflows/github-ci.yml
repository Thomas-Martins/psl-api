name: PSL API CI/CD

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  rebase-check:
    name: Rebase Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set target branch variable
        run: echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV
      - name: Check if branch is rebased on target branch
        run: |
          git fetch origin $TARGET_BRANCH
          if [ "$(git merge-base HEAD origin/$TARGET_BRANCH)" != "$(git rev-parse origin/$TARGET_BRANCH)" ]; then
            echo "The branch is not rebased on $TARGET_BRANCH."
            exit 1
          fi

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    services:
      pgsql:
        image: postgres:16
        env:
          POSTGRES_DB: homestead
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U root -d homestead"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with: { php-version: "8.3" }
      - name: Ensure storage and cache directories exist
        run: |
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 777 storage bootstrap/cache
      - name: Setup environment for testing
        run: |
          cp .env.testing-ci .env
          sed -i 's/^DB_HOST=.*/DB_HOST=127.0.0.1/' .env
          sed -i 's/^DB_PORT=.*/DB_PORT=5432/' .env
      - name: Install dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Prepare Laravel
        run: |
          mkdir -p storage bootstrap/cache && chmod -R 777 storage bootstrap/cache
          php artisan key:generate
          php artisan passport:keys --force
          php artisan config:clear
      - name: Wait for Postgres
        run: |
          for i in {1..20}; do
            pg_isready -h 127.0.0.1 -p 5432 -U sail && break
            echo "PostgreSQL pas encore pr√™t‚Ä¶ ($i/20)"
            sleep 3
          done
      - run: php artisan migrate --force
      - name: Run tests
        run: php artisan test

  deploy_dev:
    name: Deploy to Staging (develop)
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.ref == 'refs/heads/develop' && needs.tests.result == 'success'
    steps:
      - name: Deploy to Staging via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            cd /root/psl-api
            git pull origin develop
            docker compose -f docker-compose.prod.yml up -d --build laravel-dev
            docker compose -f docker-compose.prod.yml exec -T laravel-dev php artisan migrate --force
            docker compose -f docker-compose.prod.yml exec -T laravel-dev php artisan passport:keys --force
            docker compose -f docker-compose.prod.yml exec -T laravel-dev php artisan optimize

  deploy_prod:
    name: Deploy to Production (main)
    runs-on: ubuntu-latest
    needs: [tests]
    if: github.ref == 'refs/heads/main' && needs.tests.result == 'success'
    steps:
      - name: Deploy to Production via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -euo pipefail
            cd /root/psl-api
            git pull origin main
            docker compose -f docker-compose.prod.yml up -d --build laravel-prod
            docker compose -f docker-compose.prod.yml exec -T laravel-prod php artisan migrate --force
            docker compose -f docker-compose.prod.yml exec -T laravel-prod php artisan passport:keys --force
            docker compose -f docker-compose.prod.yml exec -T laravel-prod php artisan optimize

  notify-pr:
    name: Notify PR Status on Discord
    runs-on: ubuntu-latest
    needs: [tests]
    if: always() && github.event_name == 'pull_request'
    steps:
      - name: Notify Discord of PR status
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          STATUS: ${{ needs.tests.result }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
        run: |
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="‚úÖ **La PR de ${HEAD_REF} vers ${BASE_REF} a pass√© les tests et est pr√™te √† √™tre merg√©e !** üéâ"
          else
            MESSAGE="‚ùå **La PR de ${HEAD_REF} vers ${BASE_REF} a √©chou√© aux tests.** üö®"
          fi
          curl -H "Authorization: Bot $DISCORD_BOT_TOKEN" -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" https://discord.com/api/v9/channels/$DISCORD_CHANNEL_ID/messages

  notify-deploy-dev:
    name: Notify Staging Deploy Status on Discord
    runs-on: ubuntu-latest
    needs: [deploy_dev]
    if: always() && github.ref == 'refs/heads/develop'
    steps:
      - name: Notify Discord of staging deploy status
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          STATUS: ${{ needs.deploy_dev.result }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="üöÄ **D√©ploiement du backend STAGING sur ${REF_NAME} r√©ussi !** üéâ"
          else
            MESSAGE="‚ùå **Le d√©ploiement du backend STAGING sur ${REF_NAME} a √©chou√©.** üö®"
          fi
          curl -H "Authorization: Bot $DISCORD_BOT_TOKEN" -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" https://discord.com/api/v9/channels/$DISCORD_CHANNEL_ID/messages

  notify-deploy-prod:
    name: Notify Production Deploy Status on Discord
    runs-on: ubuntu-latest
    needs: [deploy_prod]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify Discord of production deploy status
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          STATUS: ${{ needs.deploy_prod.result }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [[ "$STATUS" == "success" ]]; then
            MESSAGE="üöÄ **D√©ploiement du backend PROD sur ${REF_NAME} r√©ussi !** üéâ"
          else
            MESSAGE="‚ùå **Le d√©ploiement du backend PROD sur ${REF_NAME} a √©chou√©.** üö®"
          fi
          curl -H "Authorization: Bot $DISCORD_BOT_TOKEN" -H "Content-Type: application/json" -X POST -d "{\"content\": \"$MESSAGE\"}" https://discord.com/api/v9/channels/$DISCORD_CHANNEL_ID/messages
